// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique
  name       String?
  username   String    @unique
  isverified Boolean   @default(false)
  image      String?
  category   String?
  company    String?
  posts      Post[]
  comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  token      Token[]
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String // EMAIL|API
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  option    String
  votes     Int      @default(0)
  poll      Poll?    @relation(fields: [pollId], references: [id])
  pollId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Poll {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       Option[]
  allowMultiple Boolean  @default(false)
  participants  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Post          Post[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  comments  Comment[]
  tags      String[]
  poll      Poll?     @relation(fields: [pollId], references: [id])
  likes     Int       @default(0)
  views     Int       @default(0)
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pollId    String?   @db.ObjectId
}
